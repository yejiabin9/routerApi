// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: routerApi.proto

package routerApi

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RouterApi service

func NewRouterApiEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RouterApi service

type RouterApiService interface {
	FindRouterById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	AddRouter(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeleteRouterById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	UpdateRouter(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 默认接口
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type routerApiService struct {
	c    client.Client
	name string
}

func NewRouterApiService(name string, c client.Client) RouterApiService {
	return &routerApiService{
		c:    c,
		name: name,
	}
}

func (c *routerApiService) FindRouterById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RouterApi.FindRouterById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerApiService) AddRouter(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RouterApi.AddRouter", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerApiService) DeleteRouterById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RouterApi.DeleteRouterById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerApiService) UpdateRouter(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RouterApi.UpdateRouter", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerApiService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RouterApi.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RouterApi service

type RouterApiHandler interface {
	FindRouterById(context.Context, *Request, *Response) error
	AddRouter(context.Context, *Request, *Response) error
	DeleteRouterById(context.Context, *Request, *Response) error
	UpdateRouter(context.Context, *Request, *Response) error
	// 默认接口
	Call(context.Context, *Request, *Response) error
}

func RegisterRouterApiHandler(s server.Server, hdlr RouterApiHandler, opts ...server.HandlerOption) error {
	type routerApi interface {
		FindRouterById(ctx context.Context, in *Request, out *Response) error
		AddRouter(ctx context.Context, in *Request, out *Response) error
		DeleteRouterById(ctx context.Context, in *Request, out *Response) error
		UpdateRouter(ctx context.Context, in *Request, out *Response) error
		Call(ctx context.Context, in *Request, out *Response) error
	}
	type RouterApi struct {
		routerApi
	}
	h := &routerApiHandler{hdlr}
	return s.Handle(s.NewHandler(&RouterApi{h}, opts...))
}

type routerApiHandler struct {
	RouterApiHandler
}

func (h *routerApiHandler) FindRouterById(ctx context.Context, in *Request, out *Response) error {
	return h.RouterApiHandler.FindRouterById(ctx, in, out)
}

func (h *routerApiHandler) AddRouter(ctx context.Context, in *Request, out *Response) error {
	return h.RouterApiHandler.AddRouter(ctx, in, out)
}

func (h *routerApiHandler) DeleteRouterById(ctx context.Context, in *Request, out *Response) error {
	return h.RouterApiHandler.DeleteRouterById(ctx, in, out)
}

func (h *routerApiHandler) UpdateRouter(ctx context.Context, in *Request, out *Response) error {
	return h.RouterApiHandler.UpdateRouter(ctx, in, out)
}

func (h *routerApiHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.RouterApiHandler.Call(ctx, in, out)
}
